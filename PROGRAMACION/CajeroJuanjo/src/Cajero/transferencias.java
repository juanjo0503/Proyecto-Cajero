/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Cajero;

import static Cajero.retiros.esMultiplo;
import bd.Conexion;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author alumnoT
 */
public class transferencias extends javax.swing.JFrame {

    private Tarjeta t;
    private Cliente c;
    private operaciones operaciones;
    private bienvenidos bienvenidos;

    public transferencias(Tarjeta tarjeta, Cliente cliente) {
        initComponents();
        this.t = tarjeta;
        this.c = cliente;
        initVentana();
        initBD();
    }

    private transferencias() {
        JOptionPane.showMessageDialog(this, "Error, debes iniciar sesion primero", "ERROR", JOptionPane.ERROR_MESSAGE);
        System.exit(0);
    }

    private boolean esNumero(String s1) {
        for (int i = 0; i < s1.length(); i++) {
            if (Character.isDigit(s1.charAt(i))) {
                return true;
            }
        }
        return false;
    }

    public static boolean esMultiplo(int numero) {
        return numero % 5 == 0;
    }

    private void initVentana() {
        LocalDate hoy = LocalDate.now();
        DateTimeFormatter formato = DateTimeFormatter.ofPattern("EEEE dd/MM/yyyy");
        lblFecha1.setText(hoy.format(formato));
        lblFecha1.setText(hoy.format(formato));
        LocalTime hora = LocalTime.now();
        DateTimeFormatter formato1 = DateTimeFormatter.ofPattern("HH:mm:ss");
        String sHora = hora.format(formato1);

        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                LocalTime hora = LocalTime.now();
                DateTimeFormatter formato2 = DateTimeFormatter.ofPattern("HH:mm:ss");
                String sHora = hora.format(formato2);
                lblHora1.setText(sHora);
            }
        });
        timer.start();
    }

    private void initBD() {

        conexion = Conexion.mySQL("cajerojuanjo", "root", "");
        if (conexion == null) {
            JOptionPane.showMessageDialog(this, "Error, no se pudo conectar a la base de datos", "ERROR", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        numeros = new javax.swing.JPanel();
        btn1 = new javax.swing.JButton();
        btn2 = new javax.swing.JButton();
        btn3 = new javax.swing.JButton();
        btn4 = new javax.swing.JButton();
        btn5 = new javax.swing.JButton();
        btn6 = new javax.swing.JButton();
        btn7 = new javax.swing.JButton();
        btn8 = new javax.swing.JButton();
        btn9 = new javax.swing.JButton();
        nulo1 = new javax.swing.JButton();
        btn0 = new javax.swing.JButton();
        nulo2 = new javax.swing.JButton();
        botones = new javax.swing.JPanel();
        btnRetroceder = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        btnConfirmar = new javax.swing.JButton();
        lblFecha1 = new javax.swing.JLabel();
        lblHora1 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        TransferenciaIBAN = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        TransferenciaConcepto = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        TransferenciaImporte = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        TransferenciaConfirmar = new javax.swing.JButton();
        TransferenciaCambiar = new javax.swing.JButton();
        TransferenciaSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(new java.awt.Color(102, 102, 102));
        setLocation(new java.awt.Point(550, 140));
        setMinimumSize(new java.awt.Dimension(800, 720));
        setResizable(false);

        numeros.setLayout(new java.awt.GridLayout(4, 0));

        btn1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btn1.setText("1");
        btn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn1ActionPerformed(evt);
            }
        });
        numeros.add(btn1);

        btn2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btn2.setText("2");
        btn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn2ActionPerformed(evt);
            }
        });
        numeros.add(btn2);

        btn3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btn3.setText("3");
        btn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn3ActionPerformed(evt);
            }
        });
        numeros.add(btn3);

        btn4.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btn4.setText("4");
        btn4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn4ActionPerformed(evt);
            }
        });
        numeros.add(btn4);

        btn5.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btn5.setText("5");
        btn5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn5ActionPerformed(evt);
            }
        });
        numeros.add(btn5);

        btn6.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btn6.setText("6");
        btn6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn6ActionPerformed(evt);
            }
        });
        numeros.add(btn6);

        btn7.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btn7.setText("7");
        btn7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn7ActionPerformed(evt);
            }
        });
        numeros.add(btn7);

        btn8.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btn8.setText("8");
        btn8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn8ActionPerformed(evt);
            }
        });
        numeros.add(btn8);

        btn9.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btn9.setText("9");
        btn9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn9ActionPerformed(evt);
            }
        });
        numeros.add(btn9);

        nulo1.setEnabled(false);
        numeros.add(nulo1);

        btn0.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btn0.setText("0");
        btn0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn0ActionPerformed(evt);
            }
        });
        numeros.add(btn0);

        nulo2.setEnabled(false);
        numeros.add(nulo2);

        botones.setLayout(new java.awt.GridLayout(3, 0));

        btnRetroceder.setBackground(new java.awt.Color(255, 255, 51));
        btnRetroceder.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnRetroceder.setText("RETROCEDER");
        btnRetroceder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetrocederActionPerformed(evt);
            }
        });
        botones.add(btnRetroceder);

        btnBorrar.setBackground(new java.awt.Color(204, 0, 0));
        btnBorrar.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnBorrar.setText("BORRAR");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });
        botones.add(btnBorrar);

        btnConfirmar.setBackground(new java.awt.Color(51, 204, 0));
        btnConfirmar.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnConfirmar.setText("CONFIRMAR");
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });
        botones.add(btnConfirmar);

        lblFecha1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        lblHora1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel14.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("IBAN del destinatario:  ");

        TransferenciaIBAN.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        TransferenciaIBAN.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel13.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Concepto:  ");

        TransferenciaConcepto.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        TransferenciaConcepto.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel16.setText("€");

        jLabel15.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel15.setText("Cantidad:");
        jLabel15.setMaximumSize(new java.awt.Dimension(64, 22));
        jLabel15.setMinimumSize(new java.awt.Dimension(64, 22));
        jLabel15.setPreferredSize(new java.awt.Dimension(64, 22));

        TransferenciaImporte.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        TransferenciaImporte.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TransferenciaImporte.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TransferenciaImporteFocusLost(evt);
            }
        });

        jPanel2.setLayout(new java.awt.GridLayout(3, 0));

        TransferenciaConfirmar.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        TransferenciaConfirmar.setText("Confirmar");
        TransferenciaConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransferenciaConfirmarActionPerformed(evt);
            }
        });
        jPanel2.add(TransferenciaConfirmar);

        TransferenciaCambiar.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        TransferenciaCambiar.setText("Cambiar Operación");
        TransferenciaCambiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransferenciaCambiarActionPerformed(evt);
            }
        });
        jPanel2.add(TransferenciaCambiar);

        TransferenciaSalir.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        TransferenciaSalir.setText("Salir");
        TransferenciaSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransferenciaSalirActionPerformed(evt);
            }
        });
        jPanel2.add(TransferenciaSalir);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblFecha1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblHora1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addComponent(numeros, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(botones, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(219, 219, 219)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TransferenciaImporte, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(TransferenciaConcepto, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                            .addComponent(TransferenciaIBAN))))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                .addGap(16, 16, 16))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblHora1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFecha1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TransferenciaIBAN, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TransferenciaConcepto, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(TransferenciaImporte, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(1, 1, 1)))
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numeros, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botones, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Teclado
    private void btn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn1ActionPerformed

    }//GEN-LAST:event_btn1ActionPerformed

    private void btn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn2ActionPerformed

    }//GEN-LAST:event_btn2ActionPerformed

    private void btn3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn3ActionPerformed

    }//GEN-LAST:event_btn3ActionPerformed

    private void btn4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn4ActionPerformed

    }//GEN-LAST:event_btn4ActionPerformed

    private void btn5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn5ActionPerformed

    }//GEN-LAST:event_btn5ActionPerformed

    private void btn6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn6ActionPerformed

    }//GEN-LAST:event_btn6ActionPerformed

    private void btn7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn7ActionPerformed

    }//GEN-LAST:event_btn7ActionPerformed

    private void btn8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn8ActionPerformed

    }//GEN-LAST:event_btn8ActionPerformed

    private void btn9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn9ActionPerformed

    }//GEN-LAST:event_btn9ActionPerformed

    private void btn0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn0ActionPerformed

    }//GEN-LAST:event_btn0ActionPerformed
    //Botones del teclado
    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed

    }//GEN-LAST:event_btnBorrarActionPerformed

    private void btnRetrocederActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetrocederActionPerformed

    }//GEN-LAST:event_btnRetrocederActionPerformed

    private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed
        if ((esNumero(TransferenciaImporte.getText()) == false)) {
            JOptionPane.showMessageDialog(this, "Error, solo se pueden escribir numeros", "ERROR", JOptionPane.ERROR_MESSAGE);
            TransferenciaImporte.setText("");
        } else {

            try {
                if (esMultiplo(Integer.parseInt(TransferenciaImporte.getText())) == true) {
                    sentencia = conexion.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    String sql = "SELECT * FROM clientes WHERE IBAN='" + TransferenciaIBAN.getText() + "';";
                    resultado = sentencia.executeQuery(sql);
                    if (resultado.next()) {
                        if (Integer.parseInt(TransferenciaImporte.getText()) > t.getSaldo()) {
                            JOptionPane.showMessageDialog(this, "El importe introducido es superior al saldo actual", "ERROR", JOptionPane.ERROR_MESSAGE);
                            TransferenciaImporte.setText("");
                        }
                        sentencia2 = conexion.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                        String sql2 = "SELECT * FROM tarjetas WHERE propietario=" + resultado.getInt("id") + ";";
                        resultado2 = sentencia2.executeQuery(sql2);
                        if (resultado2.next()) {
                            int transferencia = resultado2.getInt("saldo") + Integer.parseInt(TransferenciaImporte.getText());
                            resultado2.updateInt("saldo", transferencia);
                            resultado2.updateRow();
                            sentencia3 = conexion.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                            String sql3 = "SELECT * FROM tarjetas WHERE propietario=" + c.getId() + ";";
                            resultado3 = sentencia3.executeQuery(sql3);
                            if (resultado3.next()) {
                                int restado = resultado3.getInt("saldo") - Integer.parseInt(TransferenciaImporte.getText());
                                resultado3.updateInt("saldo", restado);
                                resultado3.updateRow();
                                t.setSaldo(restado);
                            }

                            int num = 0;
                            String sql4 = "Select max(id_movimiento) from movimientos";
                            resultado = sentencia.executeQuery(sql4);
                            if (resultado.next()) {
                                num = resultado.getInt(1);
                            }
                            int id = num + 1;
                            LocalDate fecha = LocalDate.now();
                            java.sql.Date fechaDate = java.sql.Date.valueOf(fecha);
                            sentencia4 = conexion.prepareStatement("INSERT INTO movimientos VALUES (?,?,?,?,?,?);");
                            sentencia4.setInt(1, id);
                            sentencia4.setInt(2, t.getPropietario());
                            sentencia4.setString(3, "Transferencia");
                            sentencia4.setString(4, TransferenciaConcepto.getText());
                            sentencia4.setInt(5, Integer.parseInt(TransferenciaImporte.getText()));
                            sentencia4.setDate(6, fechaDate);
                            sentencia4.executeUpdate();

                            if (operaciones != null) {
                                operaciones.setVisible(true);
                                this.dispose();
                            } else {
                                JOptionPane.showMessageDialog(this, "Transferencia realizada con exito", "CONFIRMACIÓN", JOptionPane.DEFAULT_OPTION);
                                operaciones = new operaciones(t, c);
                                operaciones.setVisible(true);
                                this.dispose();
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "No se encontro ningun usuario con ese IBAN", "ERROR", JOptionPane.ERROR_MESSAGE);
                        TransferenciaIBAN.setText("");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Error, solo se puede escribir multiplos de 5", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException ex) {
                Logger.getLogger(transferencias.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NumberFormatException ex) {
            }

        }
    }//GEN-LAST:event_btnConfirmarActionPerformed

    private void TransferenciaCambiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransferenciaCambiarActionPerformed
        if (operaciones != null) {
            operaciones.setVisible(true);
            this.dispose();
        } else {
            operaciones = new operaciones(t, c);
            operaciones.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_TransferenciaCambiarActionPerformed

    private void TransferenciaSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransferenciaSalirActionPerformed
        if (bienvenidos != null) {
            bienvenidos.setVisible(true);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Vuelva Pronto!!", "HASTA LUEGO", JOptionPane.DEFAULT_OPTION);
            bienvenidos = new bienvenidos();
            bienvenidos.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_TransferenciaSalirActionPerformed

    private void TransferenciaImporteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TransferenciaImporteFocusLost
        if ((esNumero(TransferenciaImporte.getText()) == false)) {
            JOptionPane.showMessageDialog(this, "Error, solo se pueden escribir numeros", "ERROR", JOptionPane.ERROR_MESSAGE);
            TransferenciaImporte.setText("");
        }
    }//GEN-LAST:event_TransferenciaImporteFocusLost

    private void TransferenciaConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransferenciaConfirmarActionPerformed
        if ((esNumero(TransferenciaImporte.getText()) == false)) {
            JOptionPane.showMessageDialog(this, "Error, solo se pueden escribir numeros", "ERROR", JOptionPane.ERROR_MESSAGE);
            TransferenciaImporte.setText("");
        } else {

            try {
                if (esMultiplo(Integer.parseInt(TransferenciaImporte.getText())) == true) {
                    sentencia = conexion.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    String sql = "SELECT * FROM clientes WHERE IBAN='" + TransferenciaIBAN.getText() + "';";
                    resultado = sentencia.executeQuery(sql);
                    if (resultado.next()) {
                        if (Integer.parseInt(TransferenciaImporte.getText()) > t.getSaldo()) {
                            JOptionPane.showMessageDialog(this, "El importe introducido es superior al saldo actual", "ERROR", JOptionPane.ERROR_MESSAGE);
                            TransferenciaImporte.setText("");
                        }
                        sentencia2 = conexion.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                        String sql2 = "SELECT * FROM tarjetas WHERE propietario=" + resultado.getInt("id") + ";";
                        resultado2 = sentencia2.executeQuery(sql2);
                        if (resultado2.next()) {
                            int transferencia = resultado2.getInt("saldo") + Integer.parseInt(TransferenciaImporte.getText());
                            resultado2.updateInt("saldo", transferencia);
                            resultado2.updateRow();
                            sentencia3 = conexion.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                            String sql3 = "SELECT * FROM tarjetas WHERE propietario=" + c.getId() + ";";
                            resultado3 = sentencia3.executeQuery(sql3);
                            if (resultado3.next()) {
                                int restado = resultado3.getInt("saldo") - Integer.parseInt(TransferenciaImporte.getText());
                                resultado3.updateInt("saldo", restado);
                                resultado3.updateRow();
                                t.setSaldo(restado);
                            }

                            int num = 0;
                            String sql4 = "Select max(id_movimiento) from movimientos";
                            resultado = sentencia.executeQuery(sql4);
                            if (resultado.next()) {
                                num = resultado.getInt(1);
                            }
                            int id = num + 1;
                            LocalDate fecha = LocalDate.now();
                            java.sql.Date fechaDate = java.sql.Date.valueOf(fecha);
                            sentencia4 = conexion.prepareStatement("INSERT INTO movimientos VALUES (?,?,?,?,?,?);");
                            sentencia4.setInt(1, id);
                            sentencia4.setInt(2, t.getPropietario());
                            sentencia4.setString(3, "Transferencia");
                            sentencia4.setString(4, TransferenciaConcepto.getText());
                            sentencia4.setInt(5, Integer.parseInt(TransferenciaImporte.getText()));
                            sentencia4.setDate(6, fechaDate);
                            sentencia4.executeUpdate();

                            if (operaciones != null) {
                                operaciones.setVisible(true);
                                this.dispose();
                            } else {
                                JOptionPane.showMessageDialog(this, "Transferencia realizada con exito", "CONFIRMACIÓN", JOptionPane.DEFAULT_OPTION);
                                operaciones = new operaciones(t, c);
                                operaciones.setVisible(true);
                                this.dispose();
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "No se encontro ningun usuario con ese IBAN", "ERROR", JOptionPane.ERROR_MESSAGE);
                        TransferenciaIBAN.setText("");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Error, solo se puede escribir multiplos de 5", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException ex) {
                Logger.getLogger(transferencias.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NumberFormatException ex) {
            }

        }
    }//GEN-LAST:event_TransferenciaConfirmarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(transferencias.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(transferencias.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(transferencias.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(transferencias.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new transferencias().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton TransferenciaCambiar;
    private javax.swing.JTextField TransferenciaConcepto;
    private javax.swing.JButton TransferenciaConfirmar;
    private javax.swing.JTextField TransferenciaIBAN;
    private javax.swing.JTextField TransferenciaImporte;
    private javax.swing.JButton TransferenciaSalir;
    private javax.swing.JPanel botones;
    private javax.swing.JButton btn0;
    private javax.swing.JButton btn1;
    private javax.swing.JButton btn2;
    private javax.swing.JButton btn3;
    private javax.swing.JButton btn4;
    private javax.swing.JButton btn5;
    private javax.swing.JButton btn6;
    private javax.swing.JButton btn7;
    private javax.swing.JButton btn8;
    private javax.swing.JButton btn9;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JButton btnRetroceder;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblFecha1;
    private javax.swing.JLabel lblHora1;
    private javax.swing.JButton nulo1;
    private javax.swing.JButton nulo2;
    private javax.swing.JPanel numeros;
    // End of variables declaration//GEN-END:variables
    Connection conexion;
    Statement sentencia;
    Statement sentencia2;
    Statement sentencia3;
    PreparedStatement sentencia4;
    ResultSet resultado;
    ResultSet resultado2;
    ResultSet resultado3;
    Tarjeta tarjeta;
    Cliente cliente;
}
